workflow: #this ensures that pipelines only run for MRs
  rules: #if you use workflow rules, the individual job rules are ignored. So you need to specify all conditions here and then remove rules from individual jobs
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

variables:
  NETLIFY_SITE_ID: '107c9c00-2367-4d9c-80bb-3c0cda594056'
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

stages:
  - build
  - deploy

test_docker:
  stage: .pre
  image: docker
  script:
    - docker --version
    - docker version

#new changes
build_website:
  image: node:22-alpine
  stage: build
  script:
    - node --version
    - npm --version
    - npm ci
    - npm run build
  artifacts:
    paths:
      - build/
    
test_artifact: 
  stage: test
  script:
    - test -f build/index.html

unit_tests:
  image: node:22-alpine
  stage: deploy
  script:
    - npm ci
    - npm test
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml

netlify_review:
  image: node:22-alpine
  stage: .pre
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  environment: #you can use environments for review apps
    name: preview/$CI_COMMIT_REF_SLUG
    url: $REVIEW_URL
  before_script:
    - npm install -g netlify-cli
    - apk add curl jq
    - mkdir build
    - echo "Test" > build/index.html
  script:
    - netlify --version
    - netlify status
    - echo "Deploying to Site ID ${NETLIFY_SITE_ID}"
    - netlify deploy --dir=build --json --auth $NETLIFY_AUTH_TOKEN | tee deploy-result.json
    - REVIEW_URL=$(jq -r '.deploy_url' deploy-result.json)
    - echo $REVIEW_URL
    - curl $REVIEW_URL | grep 'GitLab'
    - echo "REVIEW_URL=$REVIEW_URL" > deploy.env #save the URL as a job artifact
    - cat deploy.env
  artifacts:
    reports:
      dotenv: deploy.env #this makes the REVIEW_URL variable available in subsequent jobs

e2e: #end to end tests with playwright
  stage: deploy
  image: mcr.microsoft.com/playwright:v1.94.1-noble
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  variables:
    APP_BASE_URL: $REVIEW_URL #obtain from previous job as an environment variable
  script:
    - npm ci
    - ls -la
    - npm run e2e
    - ls -la
  artifacts:
    when: always
    paths:
      - reports/ #this creates a job artifact with the test reports
    reports:
      junit: reports/playwright-junit.xml

#only state environment names for deplooyment jobs. URLs are optional but useful for review apps. try to use them if you can
netlify_staging:
  image: node:22-alpine
  stage: deploy
  rules: #workflow rules do not apply to individual jobs
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  environment: #you can use environments for review apps
    name: staging/$CI_COMMIT_REF_SLUG
    url: 'https://staging--dteimuno-learn-gitlab.netlify.app/'

  before_script:
    - npm install -g netlify-cli
    - apk add curl
  script:
    - echo "Deploying to Site ID ${NETLIFY_SITE_ID}" 
    - netlify deploy --dir=build --alias=staging --site="$NETLIFY_SITE_ID" --auth="$NETLIFY_AUTH_TOKEN"
    - echo $CI_ENVIRONMENT_URL
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'


netlify_prod:
  image: node:22-alpine
  stage: deploy
  when: manual #set a manual approval stage
  rules: #workflow rules do not apply to individual jobs
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  environment: 
    name: production
    url: 'https://dteimuno-learn-gitlab.netlify.app/'

  before_script:
    - npm install -g netlify-cli
    - apk add curl
  script:
    - echo "Deploying to Site ID ${NETLIFY_SITE_ID}" 
    - netlify deploy --dir=build --prod --site="$NETLIFY_SITE_ID" --auth="$NETLIFY_AUTH_TOKEN"
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'

